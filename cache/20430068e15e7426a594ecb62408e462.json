{"title": "HOW TO: CS 577", "body": "If you got a good grade in CS 577 (with Dieter), how did you do it? How did you practice? What did you focus on? How did you train your brain to figure out complex algorithms?\n\nIf you didn't get a good grade, still share what you think you could have done better, and what you think the best way of approaching the class is.\n\nPersonally, I'm not able to figure out any of the homework problems, and as soon as I study a concept I forget a lot of it/ it becomes very hazy (even though I've studied it multiple times). I really need to figure how to optimize my approach for this class.", "comments": ["So I got an AB in the class. How? Well lots of things! The most valuable thing I did was do the homework every week with a study group. Chances were high that at least one of us could pull together an answer, which automatically meant a perfect homework grade. On top of that, it was a great way to review material and learn how to apply it. You could get immediate feedback from other students on your ideas, and if you don\u2019t get something, someone else can explain it to you. \nSo GET A STUDY GROUP!\n\nWith that, go to lecture. Take lots of notes. Review, review, review. Do the practice problems. I like making small review sheets which can help you reference concepts you may have forgotten. It helps keep big ideas in the front of your mind.\n\nUltimately, this course is about giving you a toolset and teaching you how to use each tool. That mindset helped me mentally organize what I learned and how to apply it.\n\nFeel free to message if you have more questions!", "It's been a few years since I took 577 with Dieter, but for me, what helped the most was the homework and practice problems. The textbook (if it's still being used) is incredibly dry, and I only really used it as a reference. If you are having trouble with the homework problems, try to boil them down to only essential pieces of information, and put it down on a piece of paper. \n\nProblems are often just variations of each other with unnecessary details layered on the top. If you can strip away the unnecessary details, it becomes easier to recognize patterns and reach a solution. For example, greedy algorithm problems will often ask you find the max / min solution given a large set of inputs that can be solved with brute force, simple math. When you come across something like that, you have a few ways of optimizing the brute force solution for a greedy solution.", "I made a note sheet with 3 font text. I also watched every video lecture, took detailed notes, and read part of the book, and watched videos on every topic. Basically I didn't have life for the whole semester.\n\n&#x200B;\n\nGood Luck :k"], "url": "https://www.reddit.com/r/UWMadison/comments/d8ymqq/how_to_cs_577/"}