{"title": "How is CS537 useful?", "body": "I am taking OS next sem but upon reading the syllabus idk how useful it'll be for someone like me (interested in full stack dev). Personally, I wanted to take CS564 instead. But people say 537 makes you a better programmer. Thoughts?", "comments": ["I had a really bad experience with CS564. It honestly felt like revisiting major concepts of hardware/software interaction in CS537 with data structure revisitations from CS400. It wasn't worth 4 credits or 15 weeks. My recommendation would be to do only CS537 and then look for CS764 or CS784. \n\nCS537 does make you a better programmer but this sub doesn't go into the details of it much to the point its become ritualistic to raise the idea lately. The whole idea of modern programming surrounds monadifying and treating operations on specific objects of data with specificity before gaining enough wisdom to abstract the operation to serve a broader purpose (read as piping oriented macros). This is edifying of the whole trend (can I say fad?) of automization. While CS537 does introduce such ideas by taking small system calls and then abstracting it all until the kernel, I'm not sure if this takeaway still exists when bringing up this \"right of passage\" course. It's an orientation of solving problems with a step-wise refinement than brute force that this course can have a chance of exposing you to.\n\nOf course, in the real world, there is the bottom line and the end of the day and a programmer must do what they have to for the sake of shareholders, their pay, etc. whether that be brute force or elegance, but there's always a philosophy and always the real world. The science precedes the art, unfortunately, and elegance always costs time."], "url": "https://www.reddit.com/r/UWMadison/comments/s6cvp1/how_is_cs537_useful/"}