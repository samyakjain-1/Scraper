{"title": "CS537 with Andrea", "body": "I'm going to take 537 next semester taught by Professor Andrea. From my understanding, it is one of the hardest must-takes, so I'm trying to get it over with. However, I am slightly worried about how I'll do in it because I did mediocre in 354 (like just enough to get ab) and didn't fully understand all of the programming assignments in C. Does 537 require a lot of knowledge from 354? And what is 537 like in terms of difficulty/homework? Thanks a lot.", "comments": ["I took 537 with Bart this semester so I can\u2019t speak for Andrea, but I think 354 helps to an extent but not *that* much. Bart graded it pretty funny, 60% on quizzes and 40% on programs. The quizzes were totally manageable and honestly easy if you just put the time in to learn the material, however the programming assignments sucked. \nThe programming assignments in 354 are pathetically easy compared to the things I did in OS, even with having a partner to help me. Bart expected a deep understanding and everything had to be pretty exact, but unlike most other CS classes I\u2019ve taken there was a huge emphasis on the format/style of the code, with 50% of the grade on programs coming from the modularity and cleanliness and commenting and all that. I spent a ridiculous amount of time on programs for this class, which may have stemmed from my only previous experience with C being from 354. If you do take it and the programs are reused from previous semesters please do yourself a favor and don\u2019t cheat from old GitHub repos, the profs aren\u2019t dumb and so many people got in trouble this semester. \n\nAlso a shameless plug for the OS textbook, OSTEP. easily and honestly the best textbook I\u2019ve ever had the *pleasure* of reading and I recommend to everyone, plus you can access it for free online, thanks Remzi", "I took 537 with Andrea last fall (2019) and it is hands down one of the most interesting and useful classes I've ever taken. I had an embedded software co-op in the spring and I would've been SO much more lost if I hadn't taken 537. You learn a great deal of material, the textbook is one of the best-written ever. I did every assigned reading and it was worth it. \n\nThat said, the class is HARD. It makes 354 look like child's play. I did very well in 354, but 537 was still difficult. The projects are the equivalent of memory allocator in 354, but there are 6 of them. I worked with a partner and we spent a ridiculous amount of time on them, and we were both competent in C.\n\nI don't know how Andrea's exams will work for this class in COVID-times. We had two midterms and the final. Her exams are completely multiple choice. A lot of them are trickily-worded, so you need to read each carefully. If you know the material really well, you can get a good grade on them. But there are a lot of questions. The final had \\~150, to be completed in 2 hours. This is where the information from the readings helped a ton. I also watched lecture recordings over and over.\n\nSo, it's a double-edged sword. You will learn a lot, but you must be mentally prepared for the amount of work it will take.\n\nCheers!", "Some people speak highly of the class, but my experience with 537 was very poor and I find the class to be highly over-rated. I thought it would be fun to learn how to tune a kernel, learn OS memory layout, and see how NTFS worked.\n\nAssignments had pages upon pages of vague projects specs. I personally know many people who took 0s on multiple projects yet pulled all nighter's. Our projects were just projects from other schools in XV6 and I *personally watched* people who basically copied and pasted the whole project off GitHub and changed variable names. Either the professors didn't catch shit, or their plagiarism software should refund their money. Also when  we were doing projects we crashed the linux servers almost every project. You better figure out terminal in mac or install [WSL](https://docs.microsoft.com/en-us/windows/wsl/install-win10) on Windows.\n\nThen we had to write out and track time slices MLFQs and CPU schedulers on paper, some of which are lines of easily understandable code, but are horrible to replicate by hand and which one mistake costs you the entire problem.\n\nWe also got to track cache strategies on paper spanning entire pages. Tracking 50 generations of a FIFO cache where one mistake costs you the entire problem is annoying as all hell. Does verifying the parity bits of a RAID configuration sound exciting? I didn't enjoy it, and ended up learning it from the [geeks-for-geeks page](https://www.geeksforgeeks.org/raid-redundant-arrays-of-independent-disks/).\n\nAnd then the page tables. Dear lord. Memory paging isn't that hard of a concept, but we got to look through SHEETs of paper of binary numbers to find out what the data in the multi layered page was. It made analyzing the dirty-free caches in CS 354 look like a game for toddlers.\n\nThe exams are just 50% trick multiple choice questions, and the other is figure out some stuff real quick free response. We also got quizzes where you got points back on the projects and the students got together and took pictures of the quizzes and tried to cross-check/reverse-engineer the answers round-robin style (LIKE THE SCHEDULER). No we weren't supposed to do that.\n\n# TLDR\n\nFelt like I could have just read a book on operating system design or [ran through the geeks-for-geeks page](https://www.geeksforgeeks.org/operating-systems/) and gotten the same thing out of the class. I thought it was horrible and focused on replicating menial computing tasks with a couple concepts haphazardly thrown around. Also when they catch cheaters they make a big scene out of it, but they're only the 1% that are dumb enough to get caught. Also a 40% raw in the class is a C.\n\nAnd they didn't even teach me anything about NTFS or the black-box Windows MLFQ. I wanted brevity of OS's dammit."], "url": "https://www.reddit.com/r/UWMadison/comments/kepbhi/cs537_with_andrea/"}